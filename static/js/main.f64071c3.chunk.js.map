{"version":3,"sources":["Components/Table.js","Components/FilterForm.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","countries","_props$order","order","field","dir","createOnHeaderClick","fieldToOrderBy","dirToSet","onOrderChange","arrow","react_default","a","createElement","onClick","map","country","key","Math","random","src","flag","alt","name","capital","region","population","area","FilterForm","state","text","onInputChange","e","_this","setState","target","value","onFilterChange","onSelectChange","type","this","onChange","regions","React","Component","App","filter","_this2","fetch","then","res","json","reduce","acc","split","forEach","add","Set","Object","toConsumableArray","_this3","countryNameLowerCased","toLowerCase","textFilterLowerCased","countryRegion","regionFilter","includes","sort","countryA","countryB","fieldA","fieldB","_this4","Fragment","Components_FilterForm","Components_Table","getData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f64071c3.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\n\nconst Table = props => {\n    const {countries, order: {field, dir}} = props;\n    const createOnHeaderClick = fieldToOrderBy => {\n        return () => {\n            let dirToSet;\n            if (fieldToOrderBy === field) {\n                dirToSet = dir === 'ASC' ? 'DESC' : 'ASC'\n            } else {\n                dirToSet = 'ASC'\n            }\n            props.onOrderChange({\n                field: fieldToOrderBy,\n                dir: dirToSet,\n            })\n        }\n    }\n    const arrow = dir === 'ASC' ? 'â¯†' : 'â¯…';\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th onClick={createOnHeaderClick('name')}>\n                        Name { field === 'name' && arrow } </th>\n                    <th onClick={createOnHeaderClick('capital')}>\n                        Capital { field === 'capital' && arrow }</th>\n                    <th onClick={createOnHeaderClick('region')}>\n                        Region { field === 'region' && arrow }</th>\n                    <th onClick={createOnHeaderClick('population')}>\n                        Population { field === 'population' && arrow }</th>\n                    <th onClick={createOnHeaderClick('area')}>\n                        Area (kmÂ²) { field === 'area' && arrow }</th>\n                </tr>\n            </thead>\n            <tbody>\n                {countries.map(country => (\n                    <tr key = {Math.random()}>\n                        <td><img src={country.flag} alt=\"flag\"/> {country.name}</td>\n                        <td>{country.capital}</td>\n                        <td>{country.region}</td>\n                        <td>{country.population}</td>\n                        <td>{country.area}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Table; ","import React from 'react'\n\nclass FilterForm extends React.Component {\n    state = {\n        text: '',\n        region: '',\n    }\n    onInputChange = e => {\n        this.setState(\n            { text: e.target.value },\n            () => this.props.onFilterChange(this.state)\n        )\n    }\n    onSelectChange = e => {\n        this.setState(\n            { region: e.target.value},\n            () => this.props.onFilterChange(this.state)\n        )\n    }\n    render(){\n        return (\n            <form>\n                <input type=\"text\" value={this.state.value} onChange={this.onInputChange} />\n                <select onChange={this.onSelectChange}>\n                    <option value=\"\">Region</option>\n                    {this.props.regions.map(region => (\n                        <option key={region} value={region}>{region}</option>\n                    ))}\n                </select>\n            </form>\n        )\n    }\n}\n\nexport default FilterForm ","import React from 'react';\nimport Table from './Components/Table';\nimport FilterForm from './Components/FilterForm';\nimport './App.css'\n\nclass App extends React.Component {\n  state = {\n    countries: [],\n    regions: [],\n    filter: {\n      text: '',\n      region: '',\n    },\n    order: {\n      field: 'name',\n      dir: 'ASC',\n    }\n  }\n  componentDidMount() {\n    fetch('http://localhost:3000/countries.json')\n      .then(res => res.json())\n      .then(countries => {\n        const regions = countries.reduce((acc, country) => {\n          country.region.split(' ').forEach(region => acc.add(region));\n            return acc;\n        }, new Set());\n        this.setState({ countries, regions: [...regions]});\n    });\n  }\n  getData() {\n      return this.state.countries\n      .filter(\n          country => {\n              const countryNameLowerCased = country.name.toLowerCase();\n              const textFilterLowerCased = this.state.filter.text.toLowerCase();\n              const countryRegion = country.region;\n              const regionFilter = this.state.filter.region;\n              return countryNameLowerCased.includes(textFilterLowerCased) && countryRegion.includes(regionFilter);\n          })\n      .sort((countryA, countryB) => {\n          const fieldA = countryA[this.state.order.field];\n          const fieldB = countryB[this.state.order.field];\n\n          if (fieldA > fieldB){\n            return this.state.order.dir === 'ASC' ? 1 : -1;\n          } else if (fieldA === fieldB) {\n            return 0;\n          } else {\n            return this.state.order.dir === 'ASC' ? -1 : 1;\n          }\n        })\n  }\n  onOrderChange = order => {\n    this.setState({ order })\n  }\n  render() {\n      return(\n      <>\n          <h1><span>ðŸ—º</span>Countries</h1>\n          <FilterForm regions={this.state.regions} onFilterChange={filter => this.setState({filter})} />\n          <Table countries={this.getData()} order={this.state.order} onOrderChange={this.onOrderChange} />\n      </>\n      ) \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}